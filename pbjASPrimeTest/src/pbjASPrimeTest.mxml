<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" applicationComplete="init()">

  <mx:Script>
  <![CDATA[
    import pbjAS.ops.OpDiv;
    import pbjAS.PBJParam;
    import pbjAS.ops.OpMod;
    import pbjAS.regs.RInt;
    import pbjAS.ops.OpMov;
    import pbjAS.ops.OpMul;
    import pbjAS.regs.RFloat;
    import pbjAS.PBJType;
    import pbjAS.params.Parameter;
    import pbjAS.PBJ;
    import pbjAS.PBJAssembler;
    import pbjAS.PBJChannel;
    import pbjAS.params.Texture;
    import pbjAS.ops.OpSampleNearest;
    
    
    private var testShader:Shader;
    
    private var primes:Vector.<Number>;
    
    private var startTime:Date;
    
    private function init():void
    {
      var myPBJ:PBJ = new PBJ();
      myPBJ.version = 1;
      myPBJ.name = "FindPrimes";
      myPBJ.metadatas = [];
      myPBJ.parameters = [
        new PBJParam("_OutCoord", new Parameter(PBJType.TFloat2, false, new RFloat(0, [PBJChannel.R, PBJChannel.G]))), // f0.rg
        new PBJParam("texture", new Texture(4, 0)), // t0
        new PBJParam("check", new Parameter(PBJType.TFloat, false, new RFloat(1))), // f1
        new PBJParam("result", new Parameter(PBJType.TFloat4, true, new RFloat(2))) // f2
        ];
      myPBJ.code = [
        new OpSampleNearest(new RFloat(2), new RFloat(0, [PBJChannel.R, PBJChannel.G]), 0), // texn    f2, f0.rg, t0
        new OpDiv(new RFloat(2), new RFloat(1, [PBJChannel.R, PBJChannel.R, PBJChannel.R, PBJChannel.R])) // div f2, f1.rrrr
        ];

      var assembledPBJByteArray:ByteArray = PBJAssembler.assemble(myPBJ);

      testShader = new Shader(assembledPBJByteArray);
    }
    
    private function startPBJ():void
    {
      ta.text = "";
      
      primes = new Vector.<Number>();
      
      var l:Number = new Number(limit.selectedItem);
      
      startTime = new Date();
      
      var texture:Vector.<Number> = new Vector.<Number>();
      
      for (var i:Number = 2; i <= l; i++)
      {
        texture.push(i);
      }
      
      findPrimes(texture, 2);
    }
    
    private function findPrimes(texture:Vector.<Number>, evaluator:Number):void
    {
      
      // adjust the texture so that it is a float4
      while (texture.length % 4 != 0)
      {
        texture.push(1);
      }
      
      // split into slices (height > 1)
      var sl:Number = texture.length / 4;
      var d:Number = Math.sqrt(sl);
      var w:Number = Math.ceil(sl / Math.floor(d));
      var h:Number = Math.ceil(sl / w);
      
      // adjust the texture so that it fits the dimensions
      while (texture.length < (w * h * 4))
      {
        texture.push(1);
        texture.push(1);
        texture.push(1);
        texture.push(1);
      }
      
      testShader.data.texture.width = w
      testShader.data.texture.height = h
      testShader.data.texture.input = texture;
      
      testShader.data.check.value = [evaluator];
      
      var result:Vector.<Number> = new Vector.<Number>();
      
      var shaderJob:ShaderJob = new ShaderJob(testShader, result, testShader.data.texture.width, testShader.data.texture.height);
      shaderJob.addEventListener(Event.COMPLETE, onFloatShaderJobComplete);
      shaderJob.start();
    }
    
    private function onFloatShaderJobComplete(event:ShaderEvent):void
    {
      var results:Vector.<Number> = event.vector;
      
      var texture:Vector.<Number> = new Vector.<Number>();
      
      var i:uint = 0;
      for each (var n:Number in event.vector)
      {
        // find the primes
        if (n == 1)
        {
          // prime
          primes.push(event.currentTarget.shader.data.texture.input[i]);
        }
        // dump the whole numbers
        // would be nice to do this in the Shader
        // ignore padded numbers
        else if (((n % 1) != 0) && (event.currentTarget.shader.data.texture.input[i] != 1))
        {
          texture.push(event.currentTarget.shader.data.texture.input[i]);
        }
        
        i++;
      }

      ta.text = primes.toString();
      
      // if there are more numbers left then run it again
      if (texture.length > 0)
      {
        findPrimes(texture, texture[0]);
      }
    }
      
  ]]>
  </mx:Script>
  
  <mx:Panel label="Primes" width="100%" height="100%">
    <mx:TextArea id="ta" width="100%" height="100%"/>
    <mx:ControlBar>
      <mx:ComboBox id="limit">
        <mx:dataProvider>
          <mx:Array>
            <mx:Number>10</mx:Number>
            <mx:Number>100</mx:Number>
            <mx:Number>1000</mx:Number>
            <mx:Number>10000</mx:Number>
            <mx:Number>100000</mx:Number>
            <mx:Number>1000000</mx:Number>
          </mx:Array>
        </mx:dataProvider>
      </mx:ComboBox>
      <mx:Button label="Find Primes!" click="startPBJ()"/>
    </mx:ControlBar>
  </mx:Panel>
  
</mx:Application>