<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml">
  
  <mx:Script>
  <![CDATA[
    import pbjAS.PBJParam;
    import flash.utils.ByteArray;
    
    import mx.controls.Alert;
 
    import pbjAS.ops.OpMov;
    import pbjAS.ops.OpMul;
    import pbjAS.regs.RFloat;
    import pbjAS.PBJType;
    import pbjAS.params.Parameter;
    import pbjAS.PBJ;
    import pbjAS.PBJAssembler;
    import pbjAS.PBJChannel;
    import pbjAS.params.Texture;
    import pbjAS.ops.OpSampleNearest;
  
    private function startPBJ():void
    {
      var width:Number = 5000;
      var height:Number = 1000;
      
      var myPBJ:PBJ = new PBJ();
      myPBJ.version = 1;
      myPBJ.name = "OpSampleNearest";
      myPBJ.metadatas = [];
      myPBJ.parameters = [new PBJParam("_OutCoord", new Parameter(PBJType.TFloat2, false, new RFloat(0, [PBJChannel.R, PBJChannel.G]))), // f0.rg
        new PBJParam("texture", new Texture(1, 0)), // t0
        new PBJParam("result", new Parameter(PBJType.TFloat, true, new RFloat(1, [PBJChannel.R]))) // f1.r
        ];
      myPBJ.code = [new OpSampleNearest(new RFloat(1), new RFloat(0, [PBJChannel.R, PBJChannel.G]), 0), // texn    f1, f0.rg, t0
        ];

      var assembledPBJByteArray:ByteArray = PBJAssembler.assemble(myPBJ);

      var texture:Vector.<Number> = new Vector.<Number>();

      for (var i:int = 0; i < height; i++)
      {
        for (var j:int = 0; j < width; j++)
        {
          var n:Number = Math.round(Math.random() * 1000);
          texture.push(j);
          texture.push(i);
        }
      }

      var testShader:Shader = new Shader(assembledPBJByteArray);

      var f:File = File.desktopDirectory.resolvePath("test.pbj");
      var fStream:FileStream = new FileStream();
      fStream.open(f, FileMode.WRITE);
      fStream.writeBytes(assembledPBJByteArray);
      fStream.close();

      testShader.data.texture.width = width;
      testShader.data.texture.height = height;
      testShader.data.texture.input = texture;

      var result:Vector.<Number> = new Vector.<Number>;

      var shaderJob:ShaderJob = new ShaderJob(testShader, result, width, height);
      shaderJob.addEventListener(Event.COMPLETE, onFloatShaderJobComplete);
      shaderJob.start();
    }
    
    private function onFloatShaderJobComplete(event:Event):void
    {
      ta.text = "done! \n";
    }
      
  ]]>
  </mx:Script>
  
  <mx:Button label="start" click="startPBJ()"/>
  
  <mx:TextArea id="ta" width="100%" height="100%"/>
  
</mx:WindowedApplication>