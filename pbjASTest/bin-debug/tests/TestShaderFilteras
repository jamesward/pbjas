package tests
{
  import flash.display.Shader;
  import flash.display.ShaderJob;
  import flash.events.Event;
  import flash.utils.ByteArray;
  import flash.utils.Endian;

  import net.digitalprimates.fluint.tests.TestCase;

  import pbjAS.PBJ;
  import pbjAS.PBJAssembler;
  import pbjAS.PBJChannel;
  import pbjAS.PBJDisassembler;
  import pbjAS.PBJType;
  import pbjAS.Tools;
  import pbjAS.ops.OpMov;
  import pbjAS.ops.OpMul;
  import pbjAS.ops.OpSampleNearest;
  import pbjAS.params.Parameter;
  import pbjAS.params.Texture;
  import pbjAS.regs.RFloat;
  import pbjAS.regs.RInt;

  public class TestShaderJob extends TestCase
  {
    private var width:uint = 100;
    private var height:int = 100;
    private var result:ByteArray;
    private var expectedResult:ByteArray;

    public function testSingleMul():void
    {
      var myPBJ:PBJ = new PBJ();
      myPBJ.version = 1;
      myPBJ.name = "SingleMulFilter";
      myPBJ.metadatas = [];
      myPBJ.parameters = [{name:"num1", p:new Parameter(PBJType.TFloat, false, new RFloat(0)), metas:[]}, {name:"num2", p:new Parameter(PBJType.TFloat, false, new RFloat(1)), metas:[]}, {name:"product", p:new Parameter(PBJType.TFloat, true, new RFloat(2)), metas:[]}];
      myPBJ.code = [new OpMul(new RFloat(0), new RFloat(1)), new OpMov(new RFloat(2), new RFloat(0))];

      var assembledPBJByteArray:ByteArray = PBJAssembler.assemble(myPBJ);

      var num1:Number = Math.round(Math.random() * 1000);
      var num2:Number = Math.round(Math.random() * 1000);

      var testShader:Shader = new Shader(assembledPBJByteArray);

      testShader.data.num1.value = [num1];
      testShader.data.num2.value = [num2];

      result = new ByteArray();

      var shaderJob:ShaderJob = new ShaderJob(testShader, result, 1, 1);
      shaderJob.start(true);

      var realProduct:Number = num1 * num2;

      result.position = 0;
      var calcProduct:Number = result.readFloat();

      assertEquals(realProduct, calcProduct);
    }

    public function testMulMany():void
    {
      var myPBJ:PBJ = new PBJ();
      myPBJ.version = 1;
      myPBJ.name = "MulManyFilter";
      myPBJ.metadatas = [];
      myPBJ.parameters = [{name:"_OutCoord", p:new Parameter(PBJType.TFloat2, false, new RFloat(0, [PBJChannel.R, PBJChannel.G])), metas:[]}, // f0
        {name:"tex", p:new Texture(1, 0), metas:[]}, // t0
        {name:"num", p:new Parameter(PBJType.TFloat, false, new RFloat(1)), metas:[]}, // f1
        {name:"product", p:new Parameter(PBJType.TFloat, true, new RFloat(2)), metas:[]} // f2
        ];
      myPBJ.code = [new OpSampleNearest(new RFloat(2), new RFloat(0, [PBJChannel.R, PBJChannel.G]), 0), // texn    f2, f0, t0
        new OpMul(new RFloat(2), new RFloat(1)), // mul f2, f1
        ];

      var assembledPBJByteArray:ByteArray = PBJAssembler.assemble(myPBJ);

      var tex:ByteArray = new ByteArray();
      tex.endian = Endian.LITTLE_ENDIAN;
      var num:Number = Math.round(Math.random() * 1000);

      expectedResult = new ByteArray();
      expectedResult.endian = Endian.LITTLE_ENDIAN;

      for (var i:int = 0; i < height; i++)
      {
        for (var j:int = 0; j < width; j++)
        {
          var n:Number = Math.round(Math.random() * 1000);
          tex.writeFloat(n);
          expectedResult.writeFloat(n * num);
        }
      }

      var testShader:Shader = new Shader(assembledPBJByteArray);

      testShader.data.tex.width = width;
      testShader.data.tex.height = height;
      testShader.data.tex.input = tex;

      testShader.data.num.value = [num];

      result = new ByteArray();
      result.endian = Endian.LITTLE_ENDIAN;

      var shaderJob:ShaderJob = new ShaderJob(testShader, result, width, height);
      shaderJob.addEventListener(Event.COMPLETE, asyncHandler(onShaderJobComplete, 10000, null, handleTimeout), false, 0, true);
      shaderJob.start();
    }

    protected function onShaderJobComplete(event:Event, passThroughData:Object):void
    {
      trace(Tools.hexDemp(expectedResult));
      trace(Tools.hexDemp(result));

      expectedResult.position = 0;
      result.position = 0;

      for (var k:int = 0; k < height; k++)
      {
        for (var l:int = 0; l < width; l++)
        {
          var realProduct:Number = expectedResult.readFloat();
          var calcProduct:Number = result.readFloat();

          if (realProduct != calcProduct)
          {
            fail("On row number " + k + " and column number " + l + " the product was not correct. realProduct = " + realProduct + " | calcProduct = " + calcProduct);
          }
        }
      }
    }

    private function handleTimeout(passThroughData:Object):void
    {
      fail("Timeout readed before event");
    }
  }
}